2节：
源码epoll，设计思路，设计模式， 异步消息和同步消息，消息屏障/ handlerThread IntentServer

源于生活高于生活
Choreographer，艺术，舞蹈者，跳舞 节奏
屏幕的点击。
handler： 地下 - 地上《 消息管理机制：消息-》事物
子线程（bean）  -》 主线程（显示）
ActivityThread: AMS
zero
1节课： 20页
ActivityThread： handler

java main（）jvm
功能机：FATAL error，所有的代码，都是handler
lancher （app）：zygote -》 jvm -》 ActvityThread.main

子线程
handler-》sendMessage   -> messasgeQueue.enqueueMessage   //消息队列队列的插入节点 
                                 
looper.loop()->  messasgeQueue.next（）-》handler.dispatchMessage()->handler.handleMessage（）

主线程
Message,在动的过程，内存
new Messaage() obtain()

数据结构： 有单链表实现的优先级队列，
Messge-》next-》Message -》Next（Message）
排序算法？插入
先后顺序，时间，怎么排序的 ，队列？

先进，先出

基本内容懂了

looper 源码？ 核心： 构造函数， loop，  ThreadLocal
初始化？


new looper()
ThreadLocal, 多线程，线程上下文的存储变量

线程 - Looper 不能改的？

key value
<key, value>< set(key1, value1); set(key1, value2);



线程1 -》ThreadLocalMap 1-》<唯一的ThreadLocal, valuse> looper1 -> MessageQueue

线程2 -》ThreadLocalMap 2-》<唯一的ThreadLocal, looper2>

final MessageQueue mQueue; 


static :

内部类持有外部类的对象：学习，群，Java编程思想 2~7章

recycleVIew  adpater  ViweHolder》一定？ 生命周期的问题。

enqueueMessage{
      msg.target = this;
}
GC：JVM 可达性算法

很多通信，quit

消息睡眠和唤醒机制

生产者-消费者设计模式：
多线程： 10个事件，11
两个方面的阻塞？
1） message 不到时间 ，自动唤醒
2）  messageQueue为空，无限等待

quit： 唤醒线程-》 messagequeue -》null -》 退出loop


messagequeue，对象里面的所有的函数，代码块，都会受限
锁：面试，锁
类 对象
 MessageQueue 111= new messagequeue（）；
 111. enqueueMessage
 
 MessageQueue 222= new messagequeue（）；
 222.enqueueMessage
 222.next
 
 1个线程只有一个可以操作MessageQueue 的地方
 
 
 
synchronized（）{
}

CAS 

到底：Message：子线程-》主线程

内存没有线程

子线程：里面执行得函数 ，这个函数就在子线程里面
thread：  handler.sendMessage(msg) -> MessageQueue.enequeMessage(msg)
主线程Loop（）：   轮询 MessageQueue -》msg 

static final ThreadLocal<Looper> sThreadLocal = new ThreadLocal<Looper>();

所有得线程 sThreadLocal


防止oom：

new message() ，内存 内存碎片
内存抖动： OOM
new BitMap() 4M, 连续
JVM：

享元设计
内存复用


8：Looper死循环 block为什么不会导致应用卡死

ANR:  5s 

Msg-> 5s-> handler ANR 提醒

5s:   Message,
10s:

MSG： block 不回导致anr？
线程没事做了，CPU 


立刻处理

同步屏障： 架构思维

刷新UI
16ms左右 刷新UI： 

同步： 立刻执行  messageQueue.postSyncBarrier（） -》立刻执行，不能等别的消息
异步：

next： 队列得第一个消息先执行

源码？看 AMS  流程，具体  binder 3 1 dex 1， 3 /

解决这个有可能得异步问题
面试： 多线程得锁

wait();   synchronized（）
nofityall（）  
最简单得： okhttp glide， 


IntentService  
 应用：
 service：？ 处理后台耗时任务 
 new Thread
 service 后台
 handler源码？源码有什么用
 
 处理完》 service 自动停止：内存释放
 
 同一个线程-》1 2 3 4 ： 对线程的控制么
 
 到底还有别的地方用么？
 很多地方有这么用
 fragment什么生命周期管理
 
 整理文章：原创 写的好的问题，我们收录： 200
 
 周周
 
 
 Glide.with(context).from（url）.into(iamgeView)
 
 context:? fragment.getAppalicationContext
 
 
 RequestManagerFragment getRequestManagerFragment(final android.app.FragmentManager fm) {
    
	pendingRequestManagerFragments = new HashMap<Fragment>();
    //尝试根据id去找到此前创建的RequestManagerFragment
    RequestManagerFragment current = (RequestManagerFragment) fm.findFragmentByTag(FRAGMENT_TAG);
    if (current == null) {
        //如果没有找到，那么从临时存储中寻找
        current = pendingRequestManagerFragments.get(fm);
        if (current == null) {
            //如果仍然没有找到，那么新建一个RequestManagerFragment，并添加到临时存储中。
            //然后开启事务绑定fragment并使用handler发送消息来将临时存储的fragment移除。
            current = new RequestManagerFragment();
            pendingRequestManagerFragments.put(fm, current);
            fm.beginTransaction().add(current, FRAGMENT_TAG).commitAllowingStateLoss();
            handler.obtainMessage(ID_REMOVE_FRAGMENT_MANAGER, fm).sendToTarget();
        }
    
	}
	
 
 多线程：调用一次？ 线性事件，线性执行.源码
 handler  必须应用
 binder    广播怎么 binder/研究
 2节课
 
 
 第一个： Handler loop 休眠为什么不会导致ANR
 第二个： Messagequeue 队列处理机制，在fragment 生命周期管理中的应用，整理。 2周
 第三个： 同步屏障研究一下










msg.target = null -> msg1-> msg2->msg3->msg4

20 ： 第20个 非常重要得，必须马上执行：如何去做

















